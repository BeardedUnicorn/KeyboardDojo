name: Desktop App Build and Deploy

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install app dependencies
        run: yarn install

      - name: Build shared package
        run: |
          cd shared
          yarn build

      - name: Build desktop app
        run: |
          cd desktop
          yarn build
          yarn tauri:build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-app-${{ matrix.platform }}
          path: |
            desktop/src-tauri/target/release/bundle/deb/*.deb
            desktop/src-tauri/target/release/bundle/appimage/*.AppImage
            desktop/src-tauri/target/release/bundle/msi/*.msi
            desktop/src-tauri/target/release/bundle/dmg/*.dmg
          if-no-files-found: ignore

  deploy:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare artifacts for deployment
        run: |
          mkdir -p release
          find artifacts -type f -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.dmg" | xargs -I{} cp {} release/

      - name: Deploy to release server
        env:
          RELEASE_API_KEY: ${{ secrets.RELEASE_API_KEY }}
        run: |
          cd desktop
          node scripts/deploy.js

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 