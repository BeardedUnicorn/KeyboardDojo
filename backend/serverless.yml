service: keyboard-dojo

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    USERS_TABLE: ${self:service}-${self:provider.stage}-users
    LESSONS_TABLE: ${self:service}-${self:provider.stage}-lessons
    PROGRESS_TABLE: ${self:service}-${self:provider.stage}-progress
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    GOOGLE_CLIENT_ID: ${self:custom.secrets.GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${self:custom.secrets.GOOGLE_CLIENT_SECRET}
    GITHUB_CLIENT_ID: ${self:custom.secrets.GITHUB_CLIENT_ID}
    GITHUB_CLIENT_SECRET: ${self:custom.secrets.GITHUB_CLIENT_SECRET}
    APPLE_CLIENT_ID: ${self:custom.secrets.APPLE_CLIENT_ID}
    APPLE_CLIENT_SECRET: ${self:custom.secrets.APPLE_CLIENT_SECRET}
    CLIENT_URL: ${self:custom.clientUrl}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !GetAtt UsersTable.Arn
        - !GetAtt LessonsTable.Arn
        - !GetAtt ProgressTable.Arn
        - !Sub "${UsersTable.Arn}/index/*"
        - !Sub "${LessonsTable.Arn}/index/*"
        - !Sub "${ProgressTable.Arn}/index/*"
    # Add S3 permissions for frontend deployment
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
        - s3:DeleteObject
      Resource:
        - !GetAtt WebAppBucket.Arn
        - !Join ['', [!GetAtt WebAppBucket.Arn, '/*']]

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  # Specify the frontend build path
  frontendBuildPath: '../frontend/dist'
  # Client URL for CORS and redirects
  clientUrl: ${opt:clientUrl, 'http://localhost:5173'}
  # Secrets (would be environment variables or SSM parameters in a real deployment)
  secrets:
    JWT_SECRET: ${env:JWT_SECRET, 'your-jwt-secret-for-keyboard-dojo-dev'}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID, ''}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET, ''}
    GITHUB_CLIENT_ID: ${env:GITHUB_CLIENT_ID, ''}
    GITHUB_CLIENT_SECRET: ${env:GITHUB_CLIENT_SECRET, ''}
    APPLE_CLIENT_ID: ${env:APPLE_CLIENT_ID, ''}
    APPLE_CLIENT_SECRET: ${env:APPLE_CLIENT_SECRET, ''}

package:
  individually: true
  excludeDevDependencies: true

functions:
  healthCheck:
    handler: src/functions/healthCheck.handler
    events:
      - http:
          path: /health
          method: get
          cors: true

  # Build and deploy frontend 
  deployFrontend:
    handler: src/functions/deployFrontend.handler
    timeout: 300 # 5 minutes
    environment:
      WEB_APP_BUCKET: !Ref WebAppBucket
      CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistribution

  # Authentication endpoints
  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true

  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true

  verifyToken:
    handler: src/functions/auth/verifyToken.handler
    events:
      - http:
          path: /auth/verify
          method: get
          cors: true

  # OAuth Endpoints
  googleAuth:
    handler: src/functions/auth/oauth/google.handler
    events:
      - http:
          path: /auth/google/callback
          method: post
          cors: true

  githubAuth:
    handler: src/functions/auth/oauth/github.handler
    events:
      - http:
          path: /auth/github/callback
          method: post
          cors: true

  appleAuth:
    handler: src/functions/auth/oauth/apple.handler
    events:
      - http:
          path: /auth/apple/callback
          method: post
          cors: true

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        # Schema attributes (not part of CloudFormation but conceptual):
        # - userId: String (primary key)
        # - email: String (GSI key)
        # - name: String
        # - authProvider: String (google, apple, github, email)
        # - providerId: String (ID from provider if OAuth)
        # - hashedPassword: String (for email auth)
        # - createdAt: Number (timestamp)
        # - isAdmin: Boolean
        # - isPremium: Boolean (for future)

    LessonsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-lessons
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: lessonId
            AttributeType: S
        KeySchema:
          - AttributeName: lessonId
            KeyType: HASH

    ProgressTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-progress
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    # S3 Bucket for frontend assets
    WebAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-webapp
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
              AllowedOrigins:
                - '*'
              MaxAge: 3000

    # CloudFront Origin Access Identity
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Access identity for ${self:service}-${self:provider.stage} web app

    # S3 Bucket Policy for CloudFront
    WebAppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAppBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              Action: s3:GetObject
              Resource: !Join ['', [!GetAtt WebAppBucket.Arn, '/*']]

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: WebAppOrigin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          Origins:
            - Id: WebAppOrigin
              DomainName: !GetAtt WebAppBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
          PriceClass: PriceClass_100 # Use only US, Canada and Europe

  Outputs:
    CloudFrontDistributionDomainName:
      Description: The domain name of the CloudFront distribution
      Value: !GetAtt CloudFrontDistribution.DomainName

    WebAppBucketName:
      Description: The name of the S3 bucket for the web app
      Value: !Ref WebAppBucket 