service: keyboard-dojo
org: archangelherold
app: fortunefox

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    USERS_TABLE: ${self:service}-${self:provider.stage}-users
    LESSONS_TABLE: ${self:service}-${self:provider.stage}-lessons
    PROGRESS_TABLE: ${self:service}-${self:provider.stage}-progress
    SUBSCRIPTIONS_TABLE: ${self:service}-${self:provider.stage}-subscriptions
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    GOOGLE_CLIENT_ID: ${self:custom.secrets.GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET: ${self:custom.secrets.GOOGLE_CLIENT_SECRET}
    GITHUB_CLIENT_ID: ${self:custom.secrets.GITHUB_CLIENT_ID}
    GITHUB_CLIENT_SECRET: ${self:custom.secrets.GITHUB_CLIENT_SECRET}
    APPLE_CLIENT_ID: ${self:custom.secrets.APPLE_CLIENT_ID}
    APPLE_CLIENT_SECRET: ${self:custom.secrets.APPLE_CLIENT_SECRET}
    CLIENT_URL: ${self:custom.clientUrl}
    STRIPE_SECRET_KEY: ${self:custom.secrets.STRIPE_SECRET_KEY}
    STRIPE_WEBHOOK_SECRET: ${self:custom.secrets.STRIPE_WEBHOOK_SECRET}
    PRICE_MONTHLY: ${self:custom.secrets.PRICE_MONTHLY}
    PRICE_ANNUAL: ${self:custom.secrets.PRICE_ANNUAL}
    SENTRY_DSN: ${self:custom.secrets.SENTRY_DSN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'arn:aws:logs:*:*:*'

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-s3-sync

custom:
  # Specify the frontend build path
  frontendBuildPath: '../frontend/dist'
  # Client URL for CORS and redirects
  clientUrl: ${opt:clientUrl, 'http://localhost:5173'}
  # S3 sync configuration
  s3Sync:
    - bucketName: ${self:service}-${self:provider.stage}-webapp
      localDir: ${self:custom.frontendBuildPath}
  # Secrets (would be environment variables or SSM parameters in a real deployment)
  secrets:
    JWT_SECRET: ${env:JWT_SECRET, 'your-jwt-secret-for-keyboard-dojo-dev'}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID, ''}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET, ''}
    GITHUB_CLIENT_ID: ${env:GITHUB_CLIENT_ID, ''}
    GITHUB_CLIENT_SECRET: ${env:GITHUB_CLIENT_SECRET, ''}
    APPLE_CLIENT_ID: ${env:APPLE_CLIENT_ID, ''}
    APPLE_CLIENT_SECRET: ${env:APPLE_CLIENT_SECRET, ''}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY, ''}
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET, ''}
    PRICE_MONTHLY: ${env:PRICE_MONTHLY, ''}
    PRICE_ANNUAL: ${env:PRICE_ANNUAL, ''}
    SENTRY_DSN: ${env:SENTRY_DSN, ''}

# Add build configuration using Serverless's built-in ESBuild
build:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    define: { 'require.resolve': undefined }
    platform: 'node'

package:
  individually: true
  excludeDevDependencies: true

functions:
  healthCheck:
    handler: src/handler.healthCheckHandler
    events:
      - http:
          path: /health
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'

  # Build and deploy frontend
  deployFrontend:
    handler: src/functions/deployFrontend.handler
    timeout: 300 # 5 minutes
    environment:
      WEB_APP_BUCKET: !Ref WebAppBucket
      CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistribution
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:ListBucket
          - s3:DeleteObject
        Resource:
          - !GetAtt WebAppBucket.Arn
          - !Join ['', [!GetAtt WebAppBucket.Arn, '/*']]
      - Effect: Allow
        Action:
          - cloudfront:CreateInvalidation
        Resource: '*'

  # Authentication endpoints
  register:
    handler: src/handler.registerHandler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource:
          - !GetAtt UsersTable.Arn
          - !Sub "${UsersTable.Arn}/index/*"

  login:
    handler: src/handler.loginHandler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - !GetAtt UsersTable.Arn
          - !Sub "${UsersTable.Arn}/index/*"

  verifyToken:
    handler: src/handler.verifyTokenHandler
    events:
      - http:
          path: /auth/verify
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  tokenAuthorizer:
    handler: src/handler.authorizerHandler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  testAuthorizer:
    handler: src/handler.testAuthorizerHandler
    events:
      - http:
          path: /auth/test-authorizer
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 0  # Disable caching for debugging
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: /auth/test-authorizer
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          # No authorizer for OPTIONS requests

  # OAuth Endpoints
  googleAuth:
    handler: src/handler.googleAuthHandler
    events:
      - http:
          path: /auth/google/callback
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - !GetAtt UsersTable.Arn
          - !Sub "${UsersTable.Arn}/index/*"

  # Commented out until implementation is complete
  # githubAuth:
  #   handler: src/functions/auth/oauth/github.handler
  #   events:
  #     - http:
  #         path: /auth/github/callback

  # Commented out until implementation is complete
  # appleAuth:
  #   handler: src/functions/auth/oauth/apple.handler
  #   events:
  #     - http:
  #         path: /auth/apple/callback
  #         method: post
  #         cors: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - logs:CreateLogGroup
  #         - logs:CreateLogStream
  #         - logs:PutLogEvents
  #       Resource:
  #         - 'arn:aws:logs:*:*:*'
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:Query
  #         - dynamodb:GetItem
  #       Resource:
  #         - !GetAtt UsersTable.Arn
  #         - !Sub "${UsersTable.Arn}/index/*"

  # Lesson endpoints
  getAllLessons:
    handler: src/handler.getAllLessonsHandler
    events:
      - http:
          path: /lessons
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - !GetAtt LessonsTable.Arn

  getLessonById:
    handler: src/handler.getLessonByIdHandler
    events:
      - http:
          path: /lessons/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt LessonsTable.Arn

  getLessonsByCategory:
    handler: src/handler.getLessonsByCategoryHandler
    events:
      - http:
          path: /lessons/category/{category}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt LessonsTable.Arn
          - !Sub "${LessonsTable.Arn}/index/*"

  # Progress endpoints
  getUserProgress:
    handler: src/handler.getUserProgressHandler
    events:
      - http:
          path: /progress
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt ProgressTable.Arn

  updateUserProgress:
    handler: src/handler.updateUserProgressHandler
    events:
      - http:
          path: /progress
          method: post
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt ProgressTable.Arn

  # Subscription endpoints
  createCheckoutSession:
    handler: src/handler.createCheckoutSessionHandler
    events:
      - http:
          path: /subscriptions/checkout
          method: post
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt UsersTable.Arn

  getUserSubscription:
    handler: src/handler.getUserSubscriptionHandler
    events:
      - http:
          path: /subscriptions
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - !GetAtt SubscriptionsTable.Arn
          - !Sub "${SubscriptionsTable.Arn}/index/*"

  cancelSubscription:
    handler: src/handler.cancelSubscriptionHandler
    events:
      - http:
          path: /subscriptions/cancel
          method: post
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt SubscriptionsTable.Arn

  stripeWebhook:
    handler: src/handler.stripeWebhookHandler
    events:
      - http:
          path: /webhooks/stripe
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - 'arn:aws:logs:*:*:*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt SubscriptionsTable.Arn
          - !GetAtt UsersTable.Arn

  # Admin functions
  seedLessons:
    handler: src/handler.seedLessonsHandler
    events:
      - http:
          path: /admin/seed-lessons
          method: post
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource:
          - !GetAtt LessonsTable.Arn

  getUsers:
    handler: src/handler.getUsersHandler
    events:
      - http:
          path: /admin/users
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 0  # Disable caching for debugging
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: /admin/users
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          # No authorizer for OPTIONS requests
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt UsersTable.Arn

  getLessons:
    handler: src/handler.getLessonsHandler
    events:
      - http:
          path: /admin/lessons
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 0  # Disable caching for debugging
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: /admin/lessons
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          # No authorizer for OPTIONS requests
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - !GetAtt LessonsTable.Arn

  getAdminUserProgress:
    handler: src/handler.getAdminUserProgressHandler
    events:
      - http:
          path: /admin/users/{userId}/progress
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: token
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt ProgressTable.Arn

  testAdmin:
    handler: src/handler.testAdminHandler
    events:
      - http:
          path: /admin/test
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          authorizer:
            name: tokenAuthorizer
            resultTtlInSeconds: 0  # Disable caching for debugging
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: /admin/test
          method: options
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Request-Id
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Headers
            allowCredentials: true
          # No authorizer for OPTIONS requests

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        # Schema attributes (not part of CloudFormation but conceptual):
        # - userId: String (primary key)
        # - email: String (GSI key)
        # - name: String
        # - authProvider: String (google, apple, github, email)
        # - providerId: String (ID from provider if OAuth)
        # - hashedPassword: String (for email auth)
        # - createdAt: Number (timestamp)
        # - isAdmin: Boolean
        # - isPremium: Boolean (for premium subscription)
        # - stripeCustomerId: String (Stripe customer ID)

    LessonsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-lessons
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: lessonId
            AttributeType: S
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: lessonId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        # Schema attributes (conceptual):
        # - lessonId: String (primary key)
        # - title: String
        # - description: String
        # - category: String (GSI key)
        # - difficulty: String (beginner, intermediate, advanced)
        # - order: Number
        # - content: Object
        #   - introduction: String
        #   - shortcuts: Array of Shortcut objects
        #     - id: String
        #     - name: String
        #     - description: String
        #     - keyCombination: Array of String
        #     - operatingSystem: String (optional)
        #     - context: String (optional)
        #   - tips: Array of String
        # - isPremium: Boolean
        # - createdAt: Number (timestamp)
        # - updatedAt: Number (timestamp)

    ProgressTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-progress
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        # Schema attributes (conceptual):
        # - userId: String (primary key)
        # - completedLessons: Map of LessonCompletion objects
        #   - [lessonId]: Object
        #     - completedAt: Number (timestamp)
        #     - score: Number
        #     - attempts: Number
        #     - timeSpent: Number (seconds)
        #     - shortcuts: Map of ShortcutProgress objects
        #       - [shortcutId]: Object
        #         - mastered: Boolean
        #         - attempts: Number
        #         - correctAttempts: Number
        #         - lastAttemptAt: Number (timestamp)
        # - totalLessonsCompleted: Number
        # - streakDays: Number
        # - lastActivityDate: Number (timestamp)
        # - updatedAt: Number (timestamp)

    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-subscriptions
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: stripeSubscriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ByUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ByStripeSubscriptionId
            KeySchema:
              - AttributeName: stripeSubscriptionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        # Schema attributes (conceptual):
        # - id: String (primary key - unique subscription ID)
        # - userId: String (GSI key - user who owns the subscription)
        # - stripeCustomerId: String (Stripe customer ID)
        # - stripeSubscriptionId: String (GSI key - Stripe subscription ID)
        # - plan: String (monthly, annual)
        # - status: String (active, cancelled, past_due, etc.)
        # - currentPeriodStart: Number (timestamp)
        # - currentPeriodEnd: Number (timestamp)
        # - cancelAtPeriodEnd: Boolean
        # - createdAt: Number (timestamp)
        # - updatedAt: Number (timestamp)

    # CloudFront and S3 for frontend hosting
    WebAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-webapp
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
              MaxAge: 3000

    WebAppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAppBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: !Join ['', [!GetAtt WebAppBucket.Arn, '/*']]
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for Keyboard Dojo Web App

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt WebAppBucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
          Enabled: true
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontUrlRewriteFunction.FunctionARN
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

    CloudFrontUrlRewriteFunction:
      Type: AWS::CloudFront::Function
      Properties:
        Name: ${self:service}-${self:provider.stage}-url-rewrite
        AutoPublish: true
        FunctionConfig:
          Comment: Rewrites URLs without extensions to add .html
          Runtime: cloudfront-js-1.0
        FunctionCode: |
          function handler(event) {
            var request = event.request;
            var uri = request.uri;
            
            // Handle root path explicitly
            if (uri === '/') {
              request.uri = '/index.html';
              return request;
            }
            
            // Handle directory paths (ending with /)
            if (uri.endsWith('/')) {
              request.uri = uri + 'index.html';
              return request;
            }
            
            // Handle direct file access (no extension)
            if (!uri.includes('.')) {
              request.uri = uri + '/index.html';
            }
            
            return request;
          }

  Outputs:
    CloudFrontDistributionDomainName:
      Description: The domain name of the CloudFront distribution
      Value: !GetAtt CloudFrontDistribution.DomainName

    WebAppBucketName:
      Description: The name of the S3 bucket for the web app
      Value: !Ref WebAppBucket
